@startuml SD_TOURNOIS
autonumber
hide footbox
skinparam shadowing false
actor user as u
participant ":ListeTournoi" as v <<View>>
participant ":Controller" as c <<controller>>
participant ":Tournois" as lt <<Tournois>>
participant ":Match" as lm <<Match>>

create v
activate c
c -> v :new()
deactivate c
activate u
v -> v : fillListeTournoi()
activate v
deactivate v
u -> v :selectTournament(int)
activate v
v -> c :getAllInscrit(int)
activate c
activate lt
c -> lt : getAllInscrit(tournoi int)
lt --> c : lj : List<Joueur>
c --> v : lj : List<Joueur>
c -> lt : getAllMatch(tournoi int)
lt --> c : lm : List<Match>
c --> v : lm : List<Match>
deactivate lt
deactivate c
deactivate v
v -> v : fillListeMatchInscrit()
activate v
deactivate v
alt setValuesMatch
    ref over u,lm :SD_ADD_MATCH
else selectMatchOnTournament
    u -> v :selectMatch(int)
    activate v
    activate c
    activate lm
    v -> c :matchselect : getSelectMatch(int)
    c -> lm : getSelectMatch(int)
    lm --> c : matchselect : int
    c-->v : matchselect : int
    v ->c : matchselect.getJoueur1()
    c ->lm : matchselect.getJoueur1()
    lm --> c : j1 : Joueur
    c-->v : j1: Joueur
    v-> c : matchselect.getJoueur2()
    c->lm : matchselect.getJoueur2()
    lm --> c : j2 : Joueur
    c-->v : j2 : Joueur
    v->c :matchselect.getAdversaire()
    c->lm :matchselect.getAdversaire()
    lm --> c : la : List<Joueur>
    c-->v : la : List<Joueur>
    v-> c : matchselect.getAdversaire2()
    c-> lm :matchselect.getAdversaire2()
    lm --> c : la2 : List<Joueur>
    c-->v : la2 : List<Joueur>
    v -> c : matchselect.getResultats()
    c -> lm : matchselect.getResultats()
    lm --> c : r : Resultats
    c --> v : r : Resultats
    deactivate c
    deactivate v

    alt deleteMatch
        ref over u,lm :SD_DELETE_MATCH
    else updateMatch
        ref over u,lm :SD_UPD_MATCH
        deactivate c
        deactivate v

    end
end
@enduml